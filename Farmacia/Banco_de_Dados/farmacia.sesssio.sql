-- Active: 1739219465968@@localhost@5432@farmacia


CREATE TABLE Usuarios (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    cargo VARCHAR(50) NOT NULL,
    cpf VARCHAR(11) NOT NULL UNIQUE,
    senha VARCHAR(8) NOT NULL
);

CREATE TABLE Medicamentos (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    descricao VARCHAR(255) NOT NULL,
    tipo VARCHAR(255) NOT NULL,
    preco DECIMAL(10,2) NOT NULL,
    estoque_atual INT NOT NULL,
    data_validade DATE NOT NULL
);

CREATE TABLE Vendas (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cliente_nome VARCHAR(255) NOT NULL,
    medicamento_id INT NOT NULL,
    quantidade INT NOT NULL,
    data_venda DATE NOT NULL,
    valor_total DECIMAL(10,2) NOT NULL,
    atendente_id INT NOT NULL,
    FOREIGN KEY (medicamento_id) REFERENCES Medicamentos(id),
    FOREIGN KEY (atendente_id) REFERENCES Usuarios(id)
);

CREATE TABLE Fornecedores (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    cnpj VARCHAR(14) NOT NULL UNIQUE,
    telefone VARCHAR(15) NOT NULL,
    endereco VARCHAR(255) NOT NULL
);

CREATE TABLE Estoques (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    medicamento_id INT NOT NULL,
    quantidade INT NOT NULL,
    ultima_atualizacao DATE NOT NULL,
    FOREIGN KEY (medicamento_id) REFERENCES Medicamentos(id)
);

CREATE TABLE Relatorios (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descricao VARCHAR(255) NOT NULL,
    data_geracao DATE NOT NULL,
    usuario_id INT NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES Usuarios(id)
);

CREATE TABLE Fornecedores_Medicamentos (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    medicamento_id INT NOT NULL,
    fornecedor_id INT NOT NULL,
    FOREIGN KEY (medicamento_id) REFERENCES Medicamentos(id),
    FOREIGN KEY (fornecedor_id) REFERENCES Fornecedores(id),
    quantidade INT NOT NULL,
    data_entrega DATE NOT NULL
);

INSERT INTO Usuarios (nome, cargo, cpf, senha) VALUES
('Carlos Silva', 'Gerente', '06484958173', 'senha123'),
('Ana Souza', 'Farmaceutico', '90165397195', 'senha234'),
('Bruno Lima', 'Farmaceutico', '54213699196', 'senha345'),
('Mariana Oliveira', 'Atendente', '87477004160', 'senha456'),
('Pedro Santos', 'Atendente', '50837931134', 'senha567');

INSERT INTO Usuarios (nome, cargo, cpf, senha) VALUES
('Carlos Silva', 'Gerente', '2', '3');
INSERT INTO Usuarios (nome, cargo, cpf, senha) VALUES
('Carlos Silva', 'Farmaceutico', '1', '2');

INSERT INTO Medicamentos (nome, descricao, tipo, preco, estoque_atual, data_validade) VALUES
('Paracetamol', 'Analgésico e antitérmico', 'Comprimido', 12.50, 10, '2026-08-15'),
('Ibuprofeno', 'Anti-inflamatório', 'Cápsula', 18.90, 25, '2025-06-10'),
('Omeprazol', 'Redução da acidez estomacal', 'Cápsula', 22.00, 2, '2025-12-20'), 
('Dipirona', 'Analgésico e antitérmico', 'Comprimido', 9.75, 1, '2026-04-30'),
('Amoxicilina', 'Antibiótico', 'Cápsula', 45.60, 15, '2025-09-25');

INSERT INTO Vendas (cliente_nome, medicamento_id, quantidade, data_venda, valor_total, atendente_id) VALUES
('João Almeida', 1, 2, '2025-03-10', 25.00, 4),
('Maria Fernandes', 2, 1, '2025-03-11', 18.90, 4),
('Roberto Silva', 3, 1, '2025-03-12', 22.00, 5),
('Fernanda Costa', 4, 2, '2025-03-13', 19.50, 5),
('Luiz Oliveira', 5, 3, '2025-03-14', 136.80, 4);

INSERT INTO Fornecedores (nome, cnpj, telefone, endereco) VALUES
('FarmaSupreme', '11222333444455', '11987654321', 'Rua das Flores, 123'),
('MediPharma', '22334455667788', '11976543210', 'Avenida Central, 456'),
('BioSaúde Ltda', '33445566778899', '11876543210', 'Praça da Saúde, 789'),
('Pharmaceutica BR', '44556677889900', '11765432109', 'Rua do Comércio, 101'),
('Saúde & Vida', '55667788990011', '11654321098', 'Avenida Paulista, 202');

INSERT INTO Fornecedores_Medicamentos (medicamento_id, fornecedor_id, quantidade, data_entrega) VALUES
(1, 1, 50, '2025-02-20'),
(2, 2, 100, '2025-02-25'),
(3, 3, 20, '2025-03-01'),
(4, 4, 10, '2025-03-05'),
(5, 5, 30, '2025-03-10');

INSERT INTO Estoques (medicamento_id, quantidade, ultima_atualizacao) VALUES
(1, 50, '2025-02-20'),  
(2, 100, '2025-02-25'),
(3, 20, '2025-03-01'),  
(4, 10, '2025-03-05'),  
(5, 30, '2025-03-10');  

INSERT INTO Relatorios (descricao, data_geracao, usuario_id) VALUES
('Relatório de vendas de março', '2025-03-10', 1),
('Estoque atualizado após compras', '2025-03-11', 2),
('Relatório de produtos vencidos', '2025-03-12', 3),
('Relatório de atendimentos diários', '2025-03-13', 4),
('Vendas por medicamento', '2025-03-14', 5);

--====================================== UPDATE APÓS ENTRADA

CREATE OR REPLACE FUNCTION entrada_estoque()
RETURNS TRIGGER AS
$$
BEGIN
    -- Se o medicamento já estiver no estoque, atualizar a quantidade
    IF EXISTS (SELECT * FROM estoques WHERE medicamento_id = NEW.medicamento_id) THEN
        UPDATE estoques
        SET quantidade = quantidade + NEW.quantidade,
            ultima_atualizacao = NOW()
        WHERE medicamento_id = NEW.medicamento_id;
    ELSE
        -- Caso contrário, inserir um novo registro
        INSERT INTO estoques (medicamento_id, quantidade, ultima_atualizacao)
        VALUES (NEW.medicamento_id, NEW.quantidade, NOW());
    END IF;

    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER entrada_estoque
AFTER INSERT ON Fornecedores_Medicamentos
FOR EACH ROW
EXECUTE FUNCTION entrada_estoque();


 -- exemplo
INSERT INTO Fornecedores_Medicamentos (medicamento_id, fornecedor_id, quantidade, data_entrega)
VALUES (5, 3, 5, '2025-03-20');
--====================================== UPDATE APÓS SAÍDA

CREATE OR REPLACE FUNCTION atualizar_estoque()
RETURNS TRIGGER AS
$$
BEGIN
    UPDATE Estoques
    SET quantidade = quantidade - NEW.quantidade,
        ultima_atualizacao = CURRENT_DATE
    WHERE medicamento_id = NEW.medicamento_id;
    
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER tr_atualizar_estoque
AFTER INSERT ON Vendas
FOR EACH ROW
EXECUTE FUNCTION atualizar_estoque();

-- exemplo
INSERT INTO Vendas (cliente_nome, medicamento_id, quantidade, data_venda, valor_total, atendente_id) VALUES
('Gabriel Colman', 2, 2, '2025-03-15', 25.00, 4);


--- FUNCTION ----
CREATE OR REPLACE FUNCTION fn_calcular_valor_total(medicamento_id INT, quantidade INT)
RETURNS DECIMAL(10,2) AS
$$
DECLARE
    preco_unitario DECIMAL(10,2);
    valor_total DECIMAL(10,2);
BEGIN
    -- Obtém o preço unitário do medicamento
    SELECT preco INTO preco_unitario
    FROM Medicamentos
    WHERE id = medicamento_id;
    
    -- Calcula o valor total
    IF preco_unitario IS NOT NULL THEN
        valor_total := preco_unitario * quantidade;
    ELSE
        valor_total := 0;
    END IF;
    
    RETURN valor_total;
END;
$$
LANGUAGE plpgsql;

SELECT fn_calcular_valor_total(1, 15);

SELECT * FROM VENDAS;

SELECT usuarioid FROM information_schema.columns 
WHERE vendas = 'vendas';
